include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX 50
 
int top = -1, front = 0;
int stack[MAX];
void push(char);
void pop();
 
void main()
{
    int i, choice;
    char s[MAX], b;
    while (1)
    {
        printf("1-enter string\n2-exit\n");
        printf("enter your choice\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("Enter the String\n");
            scanf("%s", s);
            for (i = 0;s[i] != '\0';i++)
            {
                b = s[i];
                push(b);
            }
            for (i = 0;i < (strlen(s) / 2);i++)
            {
                if (stack[top] == stack[front])
                {
                    pop();
                    front++;
                }
                else
                {
                    printf("%s is not a palindrome\n", s);
                    break; 
                }
            }
	    if ((strlen(s) / 2)  ==  front)
                printf("%s is palindrome\n",  s);
            front  =  0;
            top  =  -1;
            break;
        case 2:
            exit(0);
        default:
            printf("enter correct choice\n");
        }
    }
}
 
/* to push a character into stack */
void push(char a)
{
    top++;
    stack[top]  =  a;
}
 
/* to delete an element in stack */
void pop()
{
    top--;
}




#include<stdio.h>
#include<conio.h>
void append();
void swap();
void display();
struct node{
	int data;
	struct node *link;
};

struct node *root = NULL;

void main() {
	int ch;
	
	while(1) {
		printf("\nMENU\n");
		printf("1. Append\n");
		printf("2. Swap\n");
		printf("3. Display\n");
		printf("4. Exit\n");
		
		printf("Enter your choice: ");
		scanf("%d", &ch);
		
		switch(ch) {
			case 1: append();
					break;
					
			case 2: swap();
					break;
					
			case 3: display();
					break;
					
			case 4: exit(1);
			
			default: printf("\nINVALID INPUT!!\n");
		}
	}
}

// case 1
void append() {
	struct node *temp;
	
	temp = (struct node*)malloc(sizeof(struct node));
	
	printf("Enter node data: ");
	scanf("%d", &temp->data);
	temp->link = NULL;
	
	if(root == NULL) {
		root = temp;
	}
	else {
		struct node* p;
		
		p = root;
		
		while(p->link != NULL) {
			p = p->link;
		}
		
		p->link = temp;
	}
	
	printf("\nData entered successfully.\n");
}

// Case 2
void swap() {
	struct node *p, *q;
	int m, n, i, temp;
	
	printf("Enter the Mth position of the node you want to swap: ");
	scanf("%d", &m);	
	printf("Enter the Nth position of the node you want to swap with: ");
	scanf("%d", &n);
	
	p = q = root;
	
	// Travelling till location m
	for(i = 1; i < m && p != NULL; i++) {
		p = p->link;
	}
	
	// Travelling till location n
	for(i = 1; i < n && q != NULL; i++) {
		q = q->link;
	}
	
	// swaping
	if(p != NULL && q != NULL) {
		temp = p->data;
		p->data = q->data;
		q->data = temp;
		
		printf("\nSwaping successfull.\n");
	}
	else {
		printf("\nINVALID INPUT!!\n");
	}
}

// Case 3
void display() {
	struct node* temp;
	temp = root;
	
	if(temp == NULL) {
		printf("\nLIST IS EMPTY!!\n");
	}
	else {
		printf("\n");
		while(temp != NULL) {
			printf("%d\t", temp->data);
			temp = temp->link;
		}
		printf("\n");
	}
}




<!DOCTYPE html>
<html lang="en" ng-app="validationApp">
<head>
    <meta charset="UTF-8">
    <title>User Details Validation</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
	<script>
		// app.js

var validationApp = angular.module('validationApp', []);

validationApp.controller('ValidationController', function($scope) {
    $scope.user = {};

    $scope.submitForm = function() {
        // Process form submission, e.g., send data to server
        console.log('Form submitted:', $scope.user);
    };
});
</script>
</head>
<body>
    <div ng-controller="ValidationController">
        <form ng-submit="submitForm()" novalidate>
            <label>Name:</label>
            <input type="text" ng-model="user.name" ng-pattern="/^[a-zA-Z ]*$/" required>
            <span ng-show="form.name.$error.pattern">Name should contain only characters.</span><br>

            <label>Mobile Number:</label>
            <input type="text" ng-model="user.mobile" ng-pattern="/^[0-9]{10}$/" required>
            <span ng-show="form.mobile.$error.pattern">Mobile number should contain only 10 digits.</span><br>

            <label>Pin Code:</label>
            <input type="text" ng-model="user.pinCode" ng-pattern="/^[0-9]{6}$/" required>
            <span ng-show="form.pinCode.$error.pattern">Pin code should contain only 6 digits.</span><br>

            <label>Email Address:</label>
            <input type="email" ng-model="user.email" ng-pattern="/^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/" required>
            <span ng-show="form.email.$error.pattern">Invalid email address.</span><br>

            <button type="submit">Submit</button>
        </form>
    </div>

    <script src="app.js"></script>
</body>
</html>




dim(airquality)
with(airquality,plot(Ozone ~ Temp))
