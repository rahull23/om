#include<stdio.h>  
#include<stdlib.h>  
struct node   
{  
    int data;  
    struct node *next;   
};  
struct node *head;  
  
void beginsert ();   
void lastinsert ();  
void randominsert();  
void display();  
void search();  
void main ()  
{  
    int choice =0;  
    while(choice != 7)   
    {  
        printf("\n\n****Main Menu****\n");  
        printf("\nChoose one option from the following list ...\n");  
        printf("\n===============================================\n");  
	printf("\n1.Insert in begining\n2.Insert at last\n3.Insert at any random location\n4.Search for an element\n5.Show\n6.Exit\n");
        printf("\nEnter your choice?\n");         
        scanf("\n%d",&choice);  
        switch(choice)  
        {  
            case 1:  
            beginsert();      
            break;  
            case 2:  
            lastinsert();         
            break;  
            case 3:  
            randominsert();       
            break;  
            case 4:  
            search();         
            break;  
            case 5:  
            display();        
            break;  
            case 6:  
            exit(0);  
            break;  
            default:  
            printf("Please enter valid choice..");  
        }  
    }  
}
void beginsert()  
{  
    struct node *ptr;  
    int item;  
    ptr = (struct node *) malloc(sizeof(struct node *));  
    if(ptr == NULL)  
    {  
        printf("\nOVERFLOW");  
    }  
    else  
    {  
        printf("\nEnter value\n");    
        scanf("%d",&item);    
        ptr->data = item;  
        ptr->next = head;  
        head = ptr;  
        printf("\nNode inserted");  
    }  
      
}  
void lastinsert()  
{  
    struct node *ptr,*temp;  
    int item;     
    ptr = (struct node*)malloc(sizeof(struct node));      
    if(ptr == NULL)  
    {  
        printf("\nOVERFLOW");     
    }  
    else  
    {  
        printf("\nEnter value?\n");  
        scanf("%d",&item);  
        ptr->data = item;  
        if(head == NULL)  
        {  
            ptr -> next = NULL;  
            head = ptr;  
            printf("\nNode inserted");  
        }  
        else  
        {  
            temp = head;  
            while (temp -> next != NULL)  
            {  
                temp = temp -> next;  
            }  
            temp->next = ptr;  
            ptr->next = NULL;  
            printf("\nNode inserted");  
          
        }  
    }  
}  
void randominsert()  
{  
    int i,loc,item;   
    struct node *ptr, *temp;  
    ptr = (struct node *) malloc (sizeof(struct node));  
    if(ptr == NULL)  
    {  
        printf("\nOVERFLOW");  
    }  
    else  
    {  
        printf("\nEnter element value");  
        scanf("%d",&item);  
        ptr->data = item;  
        printf("\nEnter the location after which you want to insert ");  
        scanf("\n%d",&loc);  
        temp=head;  
        for(i=0;i<loc;i++)  
        {  
            temp = temp->next;  
            if(temp == NULL)  
            {  
                printf("\ncan't insert\n");  
                return;  
            }  
          
        }  
        ptr ->next = temp ->next;   
        temp ->next = ptr;   
        printf("\nNode inserted");  
    }  
}
void search()  
{  
    struct node *ptr;  
    int item,i=0,flag;  
    ptr = head;   
    if(ptr == NULL)  
    {  
        printf("\nEmpty List\n");  
    }  
    else  
    {   
        printf("\nEnter item which you want to search?\n");   
        scanf("%d",&item);  
        while (ptr!=NULL)  
        {  
            if(ptr->data == item)  
            {  
                printf("item found at location %d ",i+1);  
                flag=0;  
            }   
            else  
            {  
                flag=1;  
            }  
            i++;  
            ptr = ptr -> next;  
        }  
        if(flag==1)  
        {  
            printf("Item not found\n");  
        }  
    }     
          
}  
  
void display()  
{  
    struct node *ptr;  
    ptr = head;   
    if(ptr == NULL)  
    {  
        printf("Nothing to print");  
    }  
    else  
    {  
        printf("\nprinting values . . . . .\n");   
        while (ptr!=NULL)  
        {  
            printf("\n%d",ptr->data);  
            ptr = ptr -> next;  
        }  
    }  
}




#include<stdio.h>
#include<conio.h>
struct list
{
int data;
struct list *link;
}*front=NULL,*rear=NULL;
void create(int m)
{
struct list *tmp;
tmp=(struct list *)malloc(sizeof(struct list));
tmp->data=m;
tmp->link=NULL;
if(front==NULL)
front=tmp;
else
rear->link=tmp;
rear=tmp;
}
void del()
{
struct list *tmp;
if(front==NULL)
printf("\n\nQUEUE IS FULL");
else
{
tmp=front;
printf("\n\nDELETED IS ELEMENT %d",tmp->data);
front=front->link;
free(tmp);
}
}
void disp()
{
struct list *q;
if(front==NULL)
printf("\n\nQUEUE IS EMPTY");
else
{
q=front;
while(q!=NULL)
{
printf("%d==>",q->data);
q=q->link;
}
}
}
void main()
{
int i,n,ch;
clrscr();
do
{
printf("\n\nMENU");
printf("\n\n1.INSERT ");
printf("\n\n2.DELETE ");
printf("\n\n3.DISPLAY ");
printf("\n\n4.EXIT");
printf("\n\nENTER UR CHOICE");
scanf("%d",&ch);
switch(ch)
{
case 1:
printf("\n\nENTER THE NUMBER");
scanf("%d",&n);
create(n);
break;
case 2:
del();
break;
case 3:
printf("\n\nQUEUE ELEMENTS ARE \n\n");
disp();
break;
case 4:
exit(0);
}
}
while(ch!=4);
getch();
}



<!DOCTYPE html>
<html ng-app="historicalPlacesApp">
<head>
    <title>Historical Places</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.9/angular.min.js"></script>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.7.9/angular-route.min.js"></script>
</head>
<body>

	<h2>Historical Places</h2>

<ul>
    <li ng-repeat="place in historicalPlaces">
        <a ng-click="viewDetails(place.id)">{{place.name}}</a>
    </li>
</ul>

    <div ng-view><h2>{{place.name}}</h2>

<p><strong>History:</strong> {{place.history}}</p>
</div>

    <script>
        var app = angular.module('historicalPlacesApp', ['ngRoute']);

        // Define the configuration for the routes
        app.config(function ($routeProvider) {
            $routeProvider
                .when('/', {
                    templateUrl: 'historical-places-list.html',
                    controller: 'HistoricalPlacesListController'
                })
                .when('/place/:id', {
                    templateUrl: 'historical-place-details.html',
                    controller: 'HistoricalPlaceDetailsController'
                })
                .otherwise({
                    redirectTo: '/'
                });
        });

        // Define the controllers
        app.controller('HistoricalPlacesListController', function ($scope, $location) {
            $scope.historicalPlaces = [
                { id: 1, name: 'Place A', description: 'Description A.' },
                { id: 2, name: 'Place B', description: 'Description B.' },
                { id: 3, name: 'Place C', description: 'Description C.' },
                { id: 4, name: 'Place D', description: 'Description D.' },
                // Add more places as needed
            ];

            $scope.viewDetails = function (placeId) {
                $location.path('/place/' + placeId);
            };
        });

        app.controller('HistoricalPlaceDetailsController', function ($scope, $routeParams) {
            var placeId = $routeParams.id;
            // Retrieve place details based on placeId (can be fetched from a server)
            // For simplicity, using a hardcoded object here
            $scope.place = {
                id: placeId,
                name: 'Place ' + placeId,
                history: 'History of Place ' + placeId + '.',
            };
        });
    </script>

</body>
</html>




v1 = c(5, 6, 7) 
v2 = c(8, 9, 10, 11, 12)
arr1 = array(c(v1, v2), dim = (3, 3, 1))
v3 = c(2, 3, 4)
v4 = c(8, 9, 10, 11, 12)
arr2 = array(c(v3, v4), dim = (3, 3, 1))
mat1 = arr1[,,1]
mat2 = arr2[,,2]
Add_res = mat1 + mat2
Sab_res = mat1 - mat2