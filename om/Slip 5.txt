#include <stdio.h>  
#include <stdlib.h>  
#include <stdbool.h>  
   struct node{  
    int data;  
    struct node *left;  
    struct node *right;  
};  
struct node *root= NULL;  
   
struct node* createNode(int data){  
    struct node newNode = (struct node)malloc(sizeof(struct node));  
    newNode->data= data;  
    newNode->left = NULL;  
    newNode->right = NULL;  
    return newNode;  
}  
   
void insert(int data) {  
    struct node *newNode = createNode(data); 
    if(root == NULL){  
        root = newNode;  
        return;  
      }  
    else {  
        struct node *current = root, *parent = NULL;  
             while(true) {  
            parent = current;  
         if(data < current->data) {  
                current = current->left;  
                if(current == NULL) {  
                    parent->left = newNode;  
                    return;  
                }  
            }  
            else {  
                current = current->right;  
                if(current == NULL) {  
                    parent->right = newNode;  
                    return;  
                }  
            }  
        }  
    }  
}
struct node* minNode(struct node *root) {  
    if (root->left != NULL)  
        return minNode(root->left);  
    else   
        return root;  
}   
struct node* deleteNode(struct node *node, int value) {  
    if(node == NULL){  
          return NULL;  
     }  
    else {  
        if(value < node->data)  
            node->left = deleteNode(node->left, value);  
          
        else if(value > node->data)  
node->right = deleteNode(node->right, value);  
          
        else {  
            if(node->left == NULL && node->right == NULL)  
                node = NULL;  
            else if(node->left == NULL) {  
                node = node->right;  
            }  
            else if(node->right == NULL) {  
                node = node->left;  
            }  
            else {  
                struct node *temp = minNode(node->right);  
                node->data = temp->data;  
                node->right = deleteNode(node->right, temp->data);  
            }  
        }  
        return node;  
    }  
}  
void inorderTraversal(struct node *node) {  
    if(root == NULL){  
        printf("Tree is empty\n");  
          return;  
     }  
    else {  
            
        if(node->left!= NULL)  
            inorderTraversal(node->left);  
        printf("%d ", node->data);  
        if(node->right!= NULL)  
          inorderTraversal(node->right);  
            
    }        
}  
        
int main()  
{  
    insert(50);  
    insert(30);  
    insert(70);  
    insert(60);  
    insert(10);  
    insert(90);  
      
    printf("Binary search tree after insertion: \n");  
    inorderTraversal(root);  
      
    struct node *deletedNode = NULL;  
    deletedNode = deleteNode(root, 90);  
    printf("\nBinary search tree after deleting node 90: \n");  
    inorderTraversal(root);  
      
    deletedNode = deleteNode(root, 30);  
    printf("\nBinary search tree after deleting node 30: \n");  
    inorderTraversal(root);  
      
    deletedNode = deleteNode(root, 50);  
    printf("\nBinary search tree after deleting node 50: \n");  
    inorderTraversal(root);  
   
    return 0;  
}


#include<stdio.h>
#include<conio.h>
struct node
{
int data;
struct node *link;
}*start;
void create(int);
void disp();
void del(int);
void main()
{
int ch,n,i,k,r=0,m;
clrscr();
start=NULL;
do
{
printf(“\n\nMENU\n\n”);
printf(“\n1.CREATE\n”);
printf(“\n2.DISPLAY\n”);
printf(“\n3.DELETE\n”);
printf(“\n4.EXIT\n”);
printf(“\nENTER UR CHOICE\n”);
scanf(“%d”,&ch);
switch(ch)
{
case 1:
printf(“\n\nENTER THE NUMBER\n”);
scanf(“%d”,&n);
while(n>0)
{
k=n%10;
n=n/10;
r=r*10+k;
}
while(r>0)
{
k=r%10;
create(k);
r=r/10;
}

break;
case 2:
disp();
break;
case 4:
exit(0);
case 3:
printf(“\n\nENTER THE DATA FOR DELETE”);
scanf(“%d”,&m);
del(m);
break;
}
}
while(ch!=4);
getch();
}
void create(int data)
{
struct node *q,*tmp;
tmp=(struct node *)malloc(sizeof(struct node));
tmp->data=data;
tmp->link=NULL;
if(start==NULL)
{
start=tmp;
}
else
{
q=start;
while(q->link!=NULL)
q=q->link;
q->link=tmp;
}
}
void disp()
{
struct node *q;
if(start==NULL)
{
printf(“\n\nLIST IS EMPTY”);
}
else
{
q=start;
while(q!=NULL)
{
printf(“%d->”,q->data);
q=q->link;
}
printf(“NULL”);
}
}
void addbeg(int data)
{
struct node *tmp;
tmp=(struct node *)malloc(sizeof(struct node ));
tmp->data=data;
tmp->link=start;
start=tmp;
}
void addlast(int data)
{
struct node *q,*tmp;
tmp=(struct node *) malloc(sizeof(struct node));
tmp->data=data;
tmp->link=NULL;
q=start;
while(q->link!=NULL)
q=q->link;
q->link=tmp;
}
void addpos(int data,int pos)
{
int i;
struct node *q,*tmp;
tmp=(struct node *) malloc(sizeof(struct node));
tmp->data=data;
q=start;

for(i=0;i<pos-1;i++)
{
q=q->link;
}

tmp->link=q->link;
q->link=tmp;
}
void del(int m)
{
struct node *q,*tmp;
if(start->data==m)
{
tmp=start;
start=start->link;
free(tmp);
}
else
{
q=start;
while(q->link->link!=NULL)
{
if(q->link->data==m)
{
tmp=q->link;
q->link=tmp->link;
free(tmp);
}
q=q->link;
}

}
if(q->link->data==m)
{
tmp=q->link;
q->link=NULL;
free(tmp);
}
}


<html>
<head>
       <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular.min.js"></script>
       <script>
           var app = angular.module("a",[]);
           app.controller("b",function($scope)
                  {
                     $scope.t = function()
                           {
                             $scope.a = parseInt($scope.k)+parseInt($scope.e);
                             
                             };
                    });
       </script>
</head>
<body ng-app="a">
<div ng-controller="b">
    <form>
          <input type="text" ng-model="k" placeholder="Enter the first number">
<br><br>
          <input type="text" ng-model="e" placeholder="Enter the second number">
<br><br>
          <input type="button" value="Calculate" ng-click="t()"><br><br>
          <h1>The addition of two number is  <span ng-bind="a">{{a}}</span>!!!</h1>
    </form>
</div>
<div>

<input type="checkbox" ng-model="n" ng-init="s='Below will disabled after check'">Show<br><br>
<h1 ng-show="n">It's Show</h1>
<h1 ng-show="n">{{s}}</h1>
<input type="text" ng-disabled="n">
</div>
</body>
</html>




v1 = c(5,6,7,8,3,6.7,7.7,6.9,3.2)
sum(v1)
mean(v3)
prod(v1)