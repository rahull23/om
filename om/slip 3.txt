#include<stdio.h>
#include<string.h>
#include<stdlib.h>
struct node
{
int data;
struct node *next;
};
typedef struct node NODE;
NODE *alloc(int);
NODE *create();
NODE *findlast(NODE *);
NODE *unionlist(NODE *,NODE *);
NODE *search(NODE *,int);
void display(NODE *);
NODE *getnode();
int main()
{
NODE *list1=NULL,*list2=NULL,*list3=NULL;
printf("\nCreate first list.");
list1=create();
printf("\nCreate second list.");
list2=create();
printf("\n Data in first list: ");
display(list1);
printf("\n Data in second list: ");
display(list2);
printf("\n\n Union of two list is: ");
list3=unionlist(list1,list2);
if(list3==NULL)
printf("\nList of union is empty");
else
display(list3);
}
NODE *alloc(int val)
{
NODE *temp;
temp=(NODE *)malloc(sizeof(NODE));
temp->data=val;
temp->next=NULL;
return temp;
}
NODE *getnode()
{
NODE *temp;
temp=(NODE *)malloc(sizeof(NODE));
printf("\nEnter the data: ");
scanf("%d",&temp->data);
temp->next=NULL;
return temp;
}
NODE *search(NODE *list,int val)
{
NODE *ptr;
for(ptr=list;ptr!=NULL && ptr->data!=val;ptr=ptr->next);
return(ptr);
}
NODE *create()
{
NODE *ptr,*temp,*list=NULL;
int n,i;
printf("\n Enter how many nodes : ");
scanf("%d",&n);
for(i=0;i<n;i++)
{
temp=getnode();
if(list==NULL)
{
list=temp;
}
else
{
ptr=findlast(list);
ptr->next=temp;
}
}
return(list);
}
NODE *findlast(NODE *list)
{
NODE *ptr;
for(ptr=list;ptr->next!=NULL;ptr=ptr->next);
return(ptr);
}
NODE *unionlist(NODE *list1,NODE *list2)
{
NODE *temp,*ptr1,*ptr2,*list3=NULL;
int i,val;
for(ptr1=list1;ptr1!=NULL;ptr1=ptr1->next)
{
temp=alloc(ptr1->data);
if(list3==NULL)
list3=temp;
else
{
ptr2=findlast(list3);
ptr2->next=temp;
}
}
for(ptr1=list2;ptr1!=NULL;ptr1=ptr1->next)
{
ptr2=search(list1,ptr1->data);
if(ptr2==NULL)
{
temp=alloc(ptr1->data);

ptr2=findlast(list3);
ptr2->next=temp;
}
}
return(list3);
}
void display(NODE *list)
{
NODE *ptr;
for(ptr=list;ptr!=NULL;ptr=ptr->next)
printf("%d->",ptr->data);
printf("NULL");
}


#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct n
{
int data;
struct n *link;
};
typedef struct n NODE;
NODE *getnode(int);
NODE *findlast(NODE *);
void display(NODE *[],int);
void main()
{
NODE *ptr,*temp,*h[10];
int n,a[10][10],i,j;
printf("\n Enter total number of vertices : ");
scanf("%d",&n);
printf("\n Enter entries of an adjacency matrix :\n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
printf("\n Enter a[%d][%d] : ",i+1,j+1);
scanf("%d",&a[i][j]);
}
}
printf("\n Entered Adjacency matrix is … \n");
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
printf("\t %d ",a[i][j]);
}
printf("\n");
}
for(i=0;i<n;i++)
h[i]=NULL;
for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
if(a[i][j]==1)
{
temp=getnode(j+1);
if(h[i]==NULL)
h[i]=temp;
else
{
ptr=findlast(h[i]);
ptr->link=temp;
}
}
}
}
printf("\n The Adjacency list looks like … \n");
display(h,n);
getch();
}
NODE *getnode(int j)
{
NODE * temp;
temp = (struct n *)malloc(sizeof(struct n));
temp->data=j;
temp->link=NULL;
return(temp);
}
NODE *findlast(NODE *h)
{
NODE *ptr;
for(ptr=h;ptr->link!=NULL;ptr=ptr->link);
return(ptr);
}
void display(NODE *h[10],int n)
{
NODE *ptr;
int i;
for(i=0;i<n;i++)
{
printf("\n V%d ",i+1);
ptr=h[i];
if(ptr==NULL)
printf(" NULL");
while(ptr!=NULL)
{
printf(" ->V%d",ptr->data);
ptr=ptr->link;
}
printf("\n");
}

}



<html>
<head>
     <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular.min.js"></script>
     <script>
          let app = angular.module("a",[]);
          app.controller("StudentController", function($scope) {
              $scope.students = [
                  {'sr':1, 'name':'ketan', 'roll':3},
                  {'sr':2, 'name':'kumar', 'roll':5},
                  {'sr':3, 'name':'kunal', 'roll':6},
                  {'sr':4, 'name':'Shiva', 'roll':7},
                  {'sr':5, 'name':'Kumar', 'roll':8},
                  {'sr':6, 'name':'krishna', 'roll':9},
                  {'sr':7, 'name':'Rahul', 'roll':10},
                  {'sr':8, 'name':'Sushant', 'roll':11},
                  {'sr':9, 'name':'Ram', 'roll':12},
                  {'sr':10, 'name':'Vedant', 'roll':13}
              ];
          });
     </script>
</head>
<body ng-app="a">
<table border="2" ng-controller="StudentController">
    <tr>
        <th>Sr.no</th>
        <th>Name</th>
        <th>Roll no</th>
    </tr>
    <tr ng-repeat="x in students">
        <td>{{x.sr}}</td>
        <td>{{x.name}}</td>
        <td>{{x.roll}}</td>
    </tr>
</table>
</body>
</html>



a = c("a", "b", "c", "d", "e") 
b = c("d", "e", "f", "g") 
print("Original Dataframes") 
print(a) 
print(b) 
print("Data in first dataframe that are not present in second dataframe:") 
result = setdiff(a, b) 
print(result)