#include<stdio.h>
#include<ctype.h>

char stack[100];
int top = -1;

void push(char x)
{
    stack[++top] = x;
}

char pop()
{
    if(top == -1)
        return -1;
    else
        return stack[top--];
}

int priority(char x)
{
    if(x == '(')
        return 0;
    if(x == '+' || x == '-')
        return 1;
    if(x == '*' || x == '/')
        return 2;
    return 0;
}

int main()
{
    char exp[100];
    char *e, x;
    printf("Enter the expression : ");
    scanf("%s",exp);
    printf("\n");
    e = exp;
    
    while(*e != '\0')
    {
        if(isalnum(*e))
            printf("%c ",*e);
        else if(*e == '(')
            push(*e);
        else if(*e == ')')
        {
            while((x = pop()) != '(')
                printf("%c ", x);
        }
        else
        {
            while(priority(stack[top]) >= priority(*e))
                printf("%c ",pop());
            push(*e);
        }
        e++;
    }
    
    while(top != -1)
    {
        printf("%c ",pop());
    }return 0;
}





#include <stdio.h>  
struct node{  
    int data;  
    struct node *previous;  
    struct node *next;  
};      
struct node *head, *tail = NULL;  
void addNode(int data) {  
    struct node newNode = (struct node)malloc(sizeof(struct node));  
    newNode->data = data;  
    if(head == NULL) {  
        head = tail = newNode;  
        head->previous = NULL;  
        tail->next = NULL;  
    }  
    else {  
        tail->next = newNode;  
        newNode->previous = tail;  
        tail = newNode;  
        tail->next = NULL;  
    }  
}  
void display() {  
    struct node *current = head;  
    if(head == NULL) {  
        printf("List is empty\n");  
        return;  
    }  
    printf("Nodes of doubly linked list: \n");  
    while(current != NULL) {  
	if(current->data%2!=0)
        printf("%d ", current->data);  
        current = current->next;  
    }  
}  
   
int main()  
{  
    addNode(1);  
    addNode(2);  
    addNode(3);  
    addNode(4);  
    addNode(5);  
    display();  
   
    return 0;  
}



<!DOCTYPE html>
<html lang="en" ng-app="studentApp">
<head>
    <meta charset="UTF-8">
    <title>Student Mark Sheet</title>
    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js"></script>
    <script>
	// app.js

var studentApp = angular.module('studentApp', []);

studentApp.controller('StudentController', function($scope) {
    $scope.students = [];
    $scope.newStudent = {};

    $scope.addStudent = function() {
        // Calculate total, percentage, and grade based on sub1, sub2, sub3
        $scope.newStudent.total = parseInt($scope.newStudent.sub1) + parseInt($scope.newStudent.sub2) + parseInt($scope.newStudent.sub3);
        $scope.newStudent.percentage = ($scope.newStudent.total / 3).toFixed(2);

        if ($scope.newStudent.percentage >= 80) {
            $scope.newStudent.grade = 'A';
        } else if ($scope.newStudent.percentage >= 60) {
            $scope.newStudent.grade = 'B';
        } else if ($scope.newStudent.percentage >= 40) {
            $scope.newStudent.grade = 'C';
        } else {
            $scope.newStudent.grade = 'Fail';
        }

        // Add the new student to the list
        $scope.students.push(angular.copy($scope.newStudent));

        // Clear the form
        $scope.newStudent = {};
    };
});
</script>
</head>
<body>
    <div ng-controller="StudentController">
        <!-- Your form and display content will go here -->
    </div><!-- Inside the <div ng-controller="StudentController"> -->

<form ng-submit="addStudent()">
    <label>Roll No:</label>
    <input type="text" ng-model="newStudent.roll_no" required><br>

    <label>Student Name:</label>
    <input type="text" ng-model="newStudent.student_name" required><br>

    <label>Class:</label>
    <input type="text" ng-model="newStudent.class" required><br>

    <label>Subject 1:</label>
    <input type="number" ng-model="newStudent.sub1" required><br>

    <label>Subject 2:</label>
    <input type="number" ng-model="newStudent.sub2" required><br>

    <label>Subject 3:</label>
    <input type="number" ng-model="newStudent.sub3" required><br>

    <button type="submit">Submit</button>
</form>

<hr>

<h2>Student Mark Sheet</h2>
<table border="1">
    <tr>
        <th>Roll No</th>
        <th>Student Name</th>
        <th>Class</th>
        <th>Subject 1</th>
        <th>Subject 2</th>
        <th>Subject 3</th>
        <th>Total</th>
        <th>Percentage</th>
        <th>Grade</th>
    </tr>
    <tr ng-repeat="student in students">
        <td>{{ student.roll_no }}</td>
        <td>{{ student.student_name }}</td>
        <td>{{ student.class }}</td>
        <td>{{ student.sub1 }}</td>
        <td>{{ student.sub2 }}</td>
        <td>{{ student.sub3 }}</td>
        <td>{{ student.total }}</td>
        <td>{{ student.percentage }}</td>
        <td>{{ student.grade }}</td>
    </tr>
</table>


    <script src="app.js"></script>
</body>
</html>





data ("iris")
dataset <- iris
colnames (dataset) <- c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width","Species")
Summary (dataset)
x<- dataset [, 1:4] 
y<- dataset [, 5]
plot(x, y, main = "Features vs Species")
title (xlab = "Frature")
title (ylab = "Species")
for(i in 1:3)
points (x(y == levels (y) [â…°],], col=i,pch=16)}
legend ("topright, legend = levels (y), col = 1:3, pch = 16)

