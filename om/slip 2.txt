#include <stdio.h>
#include <string.h>

#define MAX_SIZE 100

struct Stack 
{
    char data[MAX_SIZE];
    int top;
};

void initialize(struct Stack *stack) 
{
    stack->top = -1;
}

void push(struct Stack *stack, char item) 
{
    if (stack->top >= MAX_SIZE - 1) 
	{
        printf("Stack Overflow\n");
    }
	 else 
	{
        stack->data[++stack->top] = item;
    }
}

char pop(struct Stack *stack)
{
    if (stack->top == -1) {
        printf("Stack Underflow\n");
        return '\0';
    } else {
        return stack->data[stack->top--];
    }
}

int is_empty(struct Stack *stack) {
    return (stack->top == -1);
}

int main()
{    
	int i;
	struct Stack stack;    
	initialize(&stack);
	char input[MAX_SIZE];
    printf("Enter a string: ");
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = '\0'; 
    
    for (i = 0; input[i] != '\0'; ++i) 
	{
        push(&stack, input[i]);
    }
    
    printf("Reversed string: ");
    
    while (!is_empty(&stack)) 
	{
    	printf("%c", pop(&stack));
    }
    
    printf("\n");

    return 0;
}



#include<stdio.h>
struct node
{
	int data;
	struct node *prev,*next;
};
void create(struct node **p,int n)
{
	struct node *r,*t;
	if(*p == NULL)
	{
		*p = (struct node *)malloc(sizeof(struct node));
		(*p)->data = n;
		(*p)->next = *p;
		(*p)->prev = *p;
	}
	else
	{
		r = (struct node *)malloc(sizeof(struct node));
		r->data = n;
		r->next = *p;
		t = (*p)->prev;
		r->prev = t;
		t->next = r;
		(*p)->prev = r;
	}
}
void display(struct node *p)
{
	struct node *r;
	if(p!=NULL)
	{
		printf("%d  ",p->data);
		r = p->next;
		while(r != p)
		{
			printf("%d  ",r->data);
			r=r->next;
		}
		printf("\n");
	}
}
void main()
{
	int no,ch,pos,c;
	struct node *head;
	head = NULL;	
	while(1)
	{
		printf("1.Create\n");
		printf("2.Display\n");
		printf("3.Exit\n");
		printf("Enter Your Choice\n");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:
				printf("Enter no\n");
				scanf("%d",&no);
				create(&head,no);
				display(head);
				break;
			case 2:
				display(head);
				break;
			case 3:
				exit(0);
			default:
				printf("Invalid Choice\n");
			
		}
	}
}


<html>
	<head>
		<script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.8.0/angular.min.js"></script>
	</head>
	<body ng-app="" ng-init="x=['BBA(CA)','BBA(IB)','BCA(science)'];
				 y=['M.SC(Com.science)','MSC(Com.sciencs)','MCA'];">
			
			<h1> Undergraduate Courses </h1>
				<ol ng-repeat="P in x" type="i">
					<li>{{P}}</li>
				</ol>
			<h1>Post Graduation Courses </h1>
				<ol ng-repeat="P in y" type="i">
					<li>{{P}}</li>
				</ol>
		
	</body>
</html>


v1=c(1,2,131,23,424,2,53455,643,246,366)
sort(v1,decreasing = FALSE)
sort(v1,decreasing = TRUE)
